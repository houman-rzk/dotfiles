#!/bin/sh

# TODO: After selecting subscription/channel, select order in which videos will be shown
# TODO: After selecting a video select if we want to watch it or download it
# TODO: OMG clean this shit up!!!

# MUST EXECUTE 'PRAGMA FOREIGN_KEYS = ON;' along every update sentence. E.g: "PRAGMA FOREIGN_KEYS=ON; INSERT INTO Table(id, name) VALUES (1, 'name')"

database="$XDG_DATA_HOME/yt/yt.db"
downloadIncrement=5
dir="/tmp/yt/"

ytdlFormat="%(id)s %(upload_date)s %(title)s"

[ ! -d "$dir" ] && mkdir -p "$dir" >/dev/null 2>&1

getNVideosFrom() {
    nVideos=$1
    url=$2

    yt-dlp --get-filename --max-downloads "$nVideos" "$url" -o "$ytdlFormat" > "$dir$channelId"
}

getNewChannelVideos() {
    channelId=$1
    n=$downloadIncrement

    #getChannelLatestNVideos "$channelId" $n
    getNVideosFrom $n "https://youtube.com/channel/$channelId"
    
    while checkDownloadedChannelVideos "$channelId" $n ; ret=$? && [ $ret -ne 0 ]
    do
        n=$((n + downloadIncrement))
        getNVideosFrom $n "$channelId"
    done
}

#getVideosBackToDateFrom() {
#    date=$1
#    url=$2
#
#    echo "$date"
#    #yt-dlp --get-filename --dateafter "$date" "$url" -o "$ytdlFormat" > "$dir$channelId"
#    yt-dlp --get-filename --dateafter "$date" "$url" -o "$ytdlFormat"
#}

#getChannelLatestNVideos() {
#    channelId=$1
#    nVideos=$2
#    #echo "GETTING LAST $nVideos VIDEOS"
#
#    channelUrl="https://youtube.com/channel/$channelId"
#
#    yt-dlp --get-filename --max-downloads "$nVideos" --get-title --get-id "$channelUrl" -o "%(upload_date)d" > "$dir$channelId"
#}

checkDownloadedChannelVideos() {
    channelId=$1
    tried=$2
    lineCount="$(wc -l "$dir$channelId" | awk '{print $1}')"
    videosInFile="$((lineCount / 2))"

    # tried can never be < videosInFile
    if [ "$tried" -eq $videosInFile ]
    then
        ret=1
    else
        ret=0
    fi

    return $ret
}

getAllChannelVideos() {
    url="https://youtube.com/channel/$channelId"

    yt-dlp --get-filename "$url" -o "$ytdlFormat" > "$dir$channelId"
}

addChannelToDatabase() {
    channelId=$1

    channelName="$(yt-dlp --get-filename --max-downloads 1 "https://youtube.com/channel/$channelId" -o "%(channel)s")"

    echo "PRAGMA FOREIGN_KEYS=ON; INSERT INTO Channel(channelId, channelName) VALUES ('$channelId', '$channelName')" | sqlite3 "$database"
}

addNewChannelVideosToDatabase() {
    channelId=$1
    #file="$dir$channelId"

    [ "$(echo "SELECT * FROM Channel WHERE channelId = '$channelId'" | sqlite3 "$database")" = "" ] && addChannelToDatabase "$channelId"

    while read -r video
    do
        id="$(echo "$video" | cut -d' ' -f1)"
        date="$(echo "$video" | cut -d' ' -f2)"
        title="$(echo "$video" | cut -d' ' -f3- | sed "s/'/''/g")"

        if [ "$(echo "SELECT * FROM Video WHERE videoId='$id';" | sqlite3 "$database")" = "" ]
        then
            echo "PRAGMA FOREIGN_KEYS=ON; INSERT INTO Video(videoId, channelId, videoTitle, uploadDate, watched) VALUES ('$id', '$channelId', '$title', $date, 'N')" | sqlite3 "$database"
        fi
    done < "$dir$channelId"
}

getNewVideosForChannel() {
    #channelId="$1"

    date="$(echo "SELECT MAX(uploadDate) FROM VIDEO WHERE channelId='$channelId';" | sqlite3 "$database")"

    #getVideosBackToDateFrom "$date" "https://youtube.com/channel/$channelId"
    getNewChannelVideos "$channelId"

    addNewChannelVideosToDatabase "$channelId"
}

syncSubscription() {
    channelMenu
    #getNewVideosForChannel "$channelId"
    [ "$channelId" = "" ] && exit 1
    getNewVideosForChannel

    notify-send "YT: Done syncing channel"
}




#    if [ "$(echo "SELECT * FROM Channel WHERE channelId='$channelId';" | sqlite3 "$database")" = "" ]
#    then
#        #getNewChannelVideos "$channelId"
#        getAllChannelVideos "$channelId"
#    else
#        date="$(echo "SELECT MAX(uploadDate) FROM VIDEO WHERE channelId='$channelId';" | sqlite3 "$database")"
#        getVideosBackToDateFrom "$date" "https://youtube.com/channel/$channelId"
#    fi

syncChannelVideos() {
    getAllChannelVideos "$channelId"
    addNewChannelVideosToDatabase "$channelId"

    notify-send "YT: Done syncing channel"
}

searchForChannel() {
    query="$(echo "$channelSearchQuery" | sed 's/ /+/g')"

    curl \
    -A "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5" \
    -s "https://www.youtube.com/results?search_query=$query" > "${dir}Search.raw"
    
    tr "," "\n" < "${dir}Search.raw" > "${dir}Search.sep"

    grep "channelId.*" -o --color=never < "${dir}Search.sep" | cut -d ':' -f 2 | sed -e 's/^"//g' -e 's/"$//g' > "${dir}Search.channelId"

    # This will make it a bit faster
    #grep "channelId.*" -o --color=never < "${dir}Search.sep" | cut -d ':' -f 2 | sed -e 's/^"//g' -e 's/"$//g' | head -n 1 > "${dir}Search.channelId"

    cat /dev/null > "${dir}Search.channelInfo"
    while read -r id
    do
        yt-dlp --get-filename --max-downloads 1 "https://youtube.com/channel/$id" -o "%(channel)s %(channel_follower_count)d" >> "${dir}Search.channelInfo"
    done < "${dir}Search.channelId"

    paste --delimiters=" " "${dir}Search.channelId" "${dir}Search.channelInfo" > "${dir}Search.results"
}

selectChannelFromSearch() {
    selection="$(awk '{$1=""; $NF="   -   "$NF" subscribers"; print $0 $1}' "${dir}Search.results" | sed 's/^ //g' | dmenu -i -p "Channel-search results:" -l 15)"

    [ "$selection" = "" ] && exit

    channelName="$(echo "$selection" | sed -e 's/   -   .*//g' -e 's/^ //g' -e 's/ $//g')"
    subCount="$(echo "$selection" | sed 's/.*   -   //g' | cut -d " " -f 1)"
    channelId="$(grep -w "Luke Smith" "${dir}Search.results" | grep -w --color=never "$subCount" "${dir}Search.results" | cut -d " " -f 1)"
}

getChannelIdFromName() {
    #channelName="$1"

    channelId="$(echo "SELECT channelId FROM Channel WHERE channelName='$channelName'" | sqlite3 "$database")"
}

getChannelNameFromId() {
    #channelId="$1"

    channelName="$(echo "SELECT channelName FROM Channel WHERE channelId='$channelId'" | sqlite3 "$database")"
}

channelMenu() {
    # OPTION 1
    #selection="$(echo "SELECT rowid,name FROM Channel;" | sqlite3 --separator " " "$database" | dmenu -i -l 15 | cut -d " " -f 1-)"
    #rowid="$(echo "$selection" | cut -d " " -f 1)"
    #channelId="$(echo "SELECT channelId FROM Channel WHERE rowid=$rowid;" | sqlite3 "$database")"



    # OPTION 2
    channelName="$(echo "SELECT channelName FROM Channel;" | sqlite3 --separator " " "$database" | dmenu -i -l 15 -p "Channel:")"

    getChannelIdFromName
    #getChannelIdFromName "$channelName"
}

selectVideoFromChannel() {
    order="ASC"

    getChannelNameFromId
    #getChannelNameFromId "$channelId"

    videoTitle="$(echo "SELECT watched,videoTitle FROM Video WHERE channelId='$channelId' ORDER BY uploadDate $order;" | sqlite3 --separator "   " "$database" | dmenu -i -l 15 -p "$channelName's Videos:")"

    videoTitle="$(echo "$videoTitle" | sed -e "s/'/''/g" -e 's/^.   //g')"

    videoId="$(echo "SELECT videoId FROM Video WHERE channelId='$channelId' AND videoTitle='$videoTitle';" | sqlite3 "$database" | head -n 1)"
}

playVideo() {
    echo "UPDATE Video SET watched='W' WHERE videoId='$videoId';" | sqlite3 "$database"

    if command umpv.py >/dev/null 2>&1
    then
        setsid -f umpv.py "https://youtube.com/watch?v=$videoId" >/dev/null 2>&1
    else
        setsid -f mpv --no-resume-playback --ytdl-format="[height<=720]" "https://youtube.com/watch?v=$videoId" >/dev/null 2>&1
    fi
}

getChannelSearchQuery() {
    channelSearchQuery="$(dmenu -i -p "Search Channel:" < /dev/null)"
}

watchVideoFromSubscribedChannel() {
    channelMenu
    [ "$channelId" != "" ] && selectVideoFromChannel
    [ "$videoId" != "" ] && playVideo
}

subscribeToChannel() {
    channelSearchQuery="$(dmenu -i -p "Search Channel:" < /dev/null)"

    if [ "$channelSearchQuery" != "" ]
    then
        searchForChannel
        selectChannelFromSearch
        syncChannelVideos
    fi
}

createDatabase() {
echo "DROP TABLE IF EXISTS Channel;
DROP TABLE IF EXISTS Video;
DROP TABLE IF EXISTS Playlist;

CREATE TABLE Channel (
    channelId   TEXT NOT NULL,
    channelName TEXT,
    
    PRIMARY KEY (channelId)
);

CREATE TABLE Playlist (
    playlistId      TEXT NOT NULL,
    playlistName    TEXT,
    playlistChannel TEXT,
    
    PRIMARY KEY (playlistId),
    FOREIGN KEY (playlistChannel) REFERENCES Channel(channelId)
);

CREATE TABLE Video (
    videoId     TEXT NOT NULL,
    playlistId  TEXT,
    channelId   TEXT,
    videoTitle  TEXT,
    uploadDate  INTEGER,
    watched     TEXT,

    PRIMARY KEY (videoId),
    FOREIGN KEY (channelId) REFERENCES Channel(channelId),
    FOREIGN KEY (playlistId) REFERENCES Playlist(playlistId)
);" | sqlite3 "$database"
}

resetDatabase() {
    if [ "$(dmenu -i -p "Enter 'RESET DATABASE' to reset the database:" < /dev/null)" = "RESET DATABASE" ]
    then
        rm "$database" >/dev/null 2>&1
        [ ! -f "$database" ] && createDatabase
        notify-send "YT: Database has been reset"
    fi
}

getSearchedPlaylistId() {
    query="$(echo "$playlistSearchQuery" | sed 's/ /+/g')"

    curl \
    -A "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5" \
    -s "https://www.youtube.com/results?search_query=$query" > "${dir}Search.raw"

    pgrep='"playlistRenderer":{"playlistId":"\K.{34}?","title":{"simpleText":".+?[^\"](?=")'
    grep -oP "$pgrep" "${dir}Search.raw" > "${dir}Search.results"

    cut -c 1-34 < "${dir}Search.results" > "${dir}Search.playlistId"

    rev < "${dir}Search.results" | cut -d':' -f1 | rev | sed 's/^"//g' > "${dir}Search.playlists"

    sel="$(nl -s ' ' "${dir}Search.playlists" | dmenu -i -l 15 -p "Playlist:")"
    line="$(echo "$sel" | awk '{print $1}')"
    playlistId="$(sed "${line}q;d" "${dir}Search.playlistId")"
}

addPlaylist() {
    playlistSearchQuery="$(dmenu -i -p "Search Playlist:" < /dev/null)"
    [ "$playlistSearchQuery" = "" ] && exit 1
    getSearchedPlaylistId
    [ "$playlistId" = "" ] && exit 1
    getPlaylistVideos
    addNewPlaylistVideosToDatabase
}

getPlaylistVideos() {
    yt-dlp --get-filename "https://www.youtube.com/playlist?list=$playlistId" -o "$ytdlFormat" > "${dir}${playlistId}.videos"
}

addNewPlaylistVideosToDatabase() {
    playlistName="$(yt-dlp --get-filename --max-downloads 1 "https://www.youtube.com/playlist?list=$playlistId" -o "%(playlist_title)s")"
    playlistChannelInfo="$(yt-dlp --get-filename --max-downloads 1 "https://www.youtube.com/playlist?list=$playlistId" -o "%(playlist_uploader_id)s %(uploader)s")"

    playlistChannelId="$(echo "$playlistChannelInfo" | cut -d' ' -f1)"
    #playlistChannelName="$(echo "$playlistChannelInfo" | cut -d' ' -f2-)"


    if [ "$(echo "SELECT * FROM Channel WHERE channelId='$playlistChannelId';" | sqlite3 "$database")" = "" ]
    then
        addChannelToDatabase "$playlistChannelId"
    fi

    if [ "$(echo "SELECT * FROM Playlist WHERE playlistId='$playlistId';" | sqlite3 "$database")" = "" ]
    then
        echo "PRAGMA FOREIGN_KEYS=ON; INSERT INTO Playlist(playlistId, playlistName, playlistChannel) VALUES ('$playlistId', '$playlistName', '$playlistChannelId')" | sqlite3 "$database"
    fi

    while read -r video
    do
        id="$(echo "$video" | cut -d' ' -f1)"
        date="$(echo "$video" | cut -d' ' -f2)"
        title="$(echo "$video" | cut -d' ' -f3- | sed "s/'/''/g")"

        if [ "$(echo "SELECT * FROM Video WHERE videoId='$id';" | sqlite3 "$database")" = "" ]
        then
            echo "PRAGMA FOREIGN_KEYS=ON; INSERT INTO Video(videoId, playlistId, channelId, videoTitle, uploadDate, watched) VALUES ('$id', '$playlistId', '$playlistChannelId', '$title', $date, 'N')" | sqlite3 "$database"
        fi
    done < "${dir}${playlistId}.videos"
}

watchVideoFromSubscribedPlaylist() {
    playlistsMenu
    [ "$playlistId" != "" ] && selectVideoFromPlaylist
    [ "$videoId" != "" ] && playVideo
}

playlistsMenu() {
    playlistSelection="$(echo "SELECT rowid,playlistName FROM Playlist;" | sqlite3 --separator " " "$database" | dmenu -i -l 15 -p "Playlist:")"
    rowid="$(echo "$playlistSelection" | awk '{print $1}')"

    playlistId="$(echo "SELECT playlistId FROM Playlist WHERE rowid=$rowid;" | sqlite3 "$database")"
}

getPlaylistNameById() {
    playlistName="$(echo "SELECT playlistName FROM Playlist WHERE playlistId='$playlistId';" | sqlite3 "$database")"
}

selectVideoFromPlaylist() {
    order="ASC"

    getPlaylistNameById

    videoTitle="$(echo "SELECT watched,videoTitle FROM Video WHERE playlistId='$playlistId' ORDER BY uploadDate $order;" | sqlite3 --separator "   " "$database" | dmenu -i -l 15 -p "$playlistName's Videos:")"

    videoTitle="$(echo "$videoTitle" | sed -e "s/'/''/g" -e 's/^.   //g')"

    videoId="$(echo "SELECT videoId FROM Video WHERE playlistId='$playlistId' AND videoTitle='$videoTitle';" | sqlite3 "$database" | head -n 1)"
}

mainMenu() {
    subOption="Subscriptions"
    newChannelOption="Add new channel"
    resetDBOption="Reset Database"
    playlistsOption="Playlists"
    newPlaylistOption="Add new playlist"
    syncSubscriptionOption="Sync subscription"

    [ ! -f "$database" ] && createDatabase

    [ "$(pgrep -fc "/bin/sh $0")" -ge 2 ] && notify-send "YT: Download already in progress" && sleep 2

    selection="$(printf "%s\n%s\n%s\n%s\n%s\n%s" "$subOption" "$newChannelOption" "$playlistsOption" "$newPlaylistOption" "$resetDBOption" "$syncSubscriptionOption" | dmenu -i -l 10 -p "Menu:")"

    if [ "$selection" = "$subOption" ]
    then
        watchVideoFromSubscribedChannel
    elif [ "$selection" = "$newChannelOption" ]
    then
        subscribeToChannel
    elif [ "$selection" = "$resetDBOption" ]
    then
        resetDatabase
    elif [ "$selection" = "$newPlaylistOption" ]
    then
        addPlaylist
    elif [ "$selection" = "$playlistsOption" ]
    then
        watchVideoFromSubscribedPlaylist
    elif [ "$selection" = "$syncSubscriptionOption" ]
    then
        syncSubscription
    else
        exit
    fi
}

mainMenu
