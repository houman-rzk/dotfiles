#!/bin/sh

# Jflex lib directory path variable (should be set to your /path/to/jflex/lib/ directory). Leaving it empty will set it automatically (see 'setAndCheckVars' function).
JFLEXLIB=""

# Java-cup jar file variable (should be set to your /path/to/java-cup.jar file, which should preferably be inside /path/to/jflex/lib/). Leaving it empty will set it automatically (see 'setAndCheckVars' function).
JAVACUPJAR=""



# Automatic setting of variables
scriptName="$(echo "$0" | rev | cut -d '/' -f 1 | rev)"
setAndCheckVars() {
    [ "$JFLEXLIB" = "" ] && JFLEXLIB="$(find "$XDG_DATA_HOME" -iwholename "*jflex*/lib" | head -n 1)"
    
    [ "$JAVACUPJAR" = "" ] && JAVACUPJAR="$(find "$JFLEXLIB" -iwholename "*cup*.jar" | grep -v runtime | head -n 1)"

    [ "$JFLEXLIB" = "" ] && { echo "ERROR - Could not find the jflex 'lib' directory." ; echo "Run '$scriptName -h' for help" ; exit 1 ;}
    
    [ "$JAVACUPJAR" = "" ] && [ -n "$cupFile" ] && { echo "ERROR - Could not find the java cup 'jar' file." ; echo "Run '$scriptName -h' for help" ; exit 1 ;} 
}



### Function definitions
# Run without cup
jflexRun() {
    LOGFILE=/tmp/jflex.log
    
    jflex "$jflexFile" > $LOGFILE || { cat $LOGFILE && rm $LOGFILE > /dev/null 2>&1 && exit 1 ;}
    
    output="$(tail -n 1 $LOGFILE | cut -d '"' -f 2 | sed 's/.java//g')"
    
    rm $LOGFILE > /dev/null 2>&1
    
    javac "$output.java" || { echo "ERROR - Error in compiling the file" && exit 1 ;}
    
    # Run
    java "$output" "$sourceFile" || { echo "ERROR - Error in execution" && exit 1 ;}
    
    # Cleanup
    rm "$output"*.java* > /dev/null 2>&1 ; rm "$output"*.class* > /dev/null 2>&1
}

# Run with cup
jflexCupRun() {
    LOGFILE=/tmp/jflex-java-cup.log
    
    jflex "$jflexFile" > $LOGFILE || { cat $LOGFILE && rm $LOGFILE > /dev/null 2>&1 && exit 1 ;}

    jflexOutput="$(tail -n 1 $LOGFILE | cut -d '"' -f 2)"

    java -jar "$JAVACUPJAR" "$cupFile" > $LOGFILE 2>&1 || { cat $LOGFILE && rm $LOGFILE > /dev/null 2>&1 && exit 1 ;}

    grep -o --color=never '[[:alnum:]]*.java' "$LOGFILE" > files

    symFile="$(grep -oi --color=never 'sy[[:alnum:]]*.java' files)"

    javac "$symFile" > $LOGFILE || { cat $LOGFILE && rm $LOGFILE > /dev/null 2>&1 && exit 1 ;}

    javac "$jflexOutput" -cp "$JFLEXLIB":. > $LOGFILE || { cat $LOGFILE && rm $LOGFILE > /dev/null 2>&1 && exit 1 ;}

    while read -r f ; do
        javac "$f" -cp "$JFLEXLIB":. > $LOGFILE || { cat $LOGFILE && rm $LOGFILE > /dev/null 2>&1 && exit 1 ;}
        [ "$f" != "$symFile" ] && executable="$(echo "$f" | cut -d '.' -f 1)"
    done < files

    # Run
    java -cp "$JFLEXLIB":. "$executable" "$sourceFile" || { echo "ERROR - Error in execution" && exit 1 ;}

    # Cleanup
    rm ./*.java* > /dev/null 2>&1 ; rm ./*.class* > /dev/null 2>&1 ; rm files > /dev/null 2>&1
}


printHelp() {
    printf "Usage: %s [OPTIONS]\n\n" "$scriptName"
    printf "%s options:\n" "$scriptName"
    echo "    -h          Display this help and exit.
    -j <file>   Use <file> as jflex lexical specification file.
    -s <file>   Use <file> as source code file.
    -c <file>   (Optional) Use <file> as cup specification file.
    -l <dir>    (Optional) Path to library directory. Multiple library directories can be specified by separating them with ':' (as in <dir>:<dir>).

    Notes: 
    - To use java-cup you must have the 'java-cup-<version>.jar' and java-cup-runtime-<version>.jar' files in your /path/to/jflex/lib/ directory (you can specify this directory by setting the 'JFLEXLIB' variable or by using the '-l' option.
    - Check the source code, it's the best documentation ;)"
}



### The actual script
optstring=":hj:s:c:"

while getopts $optstring opt ; do
    case $opt in
        h) printHelp ; exit 0 ;;
        c) cupFile="$OPTARG" ;;
        j) jflexFile="$OPTARG" ;;
        s) sourceFile="$OPTARG" ;;
        l) JFLEXLIB="$OPTARG" ;;
        \?) echo "ERROR - Unknown option '-$OPTARG'" ; echo "Run '$scriptName -h' for help" ; exit 1 ;;
    esac
done ;

setAndCheckVars

[ -z "$jflexFile" ] && { echo "ERROR - Missing jflex specification file" ; echo "Run '$scriptName -h' for help" && exit 1 ;}
[ -z "$sourceFile" ] && { echo "ERROR - Missing source file" ; echo "Run '$scriptName -h' for help" ; exit 1 ;}

if [ -z "$cupFile" ] ; then
    jflexRun
else
    jflexCupRun
fi
