#!/bin/sh

# TODO: add incrementalGet syncing option (to not have to fetch all videos of a stored channel)

database="$XDG_DATA_HOME/yt/yt.db"
dir="/tmp/yt/"
#ytdlFormat="%(id)s %(upload_date)s %(title)s"

[ ! -d "$dir" ] && mkdir -p "$dir" >/dev/null 2>&1

getVideosFrom() {
    chplOpt="$1"
    id="$2"

    if [ "$chplOpt" = "-c" ]
    then
        query="SELECT watched,videoTitle FROM Video WHERE channelId='$id' ORDER BY rowid ASC;"
    elif [ "$chplOpt" = "-p" ]
    then
        query="SELECT watched,videoTitle FROM Video WHERE playlistId='$id' ORDER BY rowid ASC;"
    fi

    echo "$query" | sqlite3 --separator ' ' "$database"
}

getInstance() {
    curl -s "https://api.invidious.io/instances.json?sort_by=type,health,api" | jq -r '[.[]|select(.[1].api==true)|.[1].uri]|.[:10]|join("\n")' | shuf -n1
}

searchForNew() {
    chplOpt="$1"

    cleanPattern='s/","title":{"simpleText":"/ /g'

    if [ "$chplOpt" = "-c" ]
    then
        object="Channel"
        firstPattern='"channelRenderer":{"channelId":"\K.{24}?","title":{"simpleText":".+?[^\"](?=")'
        secondPattern='"videoCountText":{"accessibility":{"accessibilityData":{"label":"\K.+? '
    elif [ "$chplOpt" = "-p" ]
    then
        object="Playlist"
        firstPattern='"playlistRenderer":{"playlistId":"\K.+?","title":{"simpleText":".+?[^\"](?=")'
        secondPattern='"playlistRenderer":{"playlistId":".+?","title":{"simpleText":".+?[^\"](?=").+?shortBylineText":{"runs":\[{"text":\K.+?"'
    fi

    query="$(dmenu -i -p "Search for $object:" < /dev/null | tr ' ' '+')"
    [ "$query" = "" ] && exit

    [ "$chplOpt" = "-p" ] && [ "$(echo "$query" | rev | cut -d'+' -f1 | rev)" != "playlist" ] && query="${query}+playlist"

    rawSearch="$(curl -A "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5" -s "https://www.youtube.com/results?search_query=$query")"
    processed="$(echo "$rawSearch" | grep -oP "$firstPattern")"

    results="$(echo "$processed" | sed "$cleanPattern")"

    ids="$(echo "$results" | cut -d' ' -f1)"
    names="$(echo "$results" | cut -d' ' -f2-)"

    if [ "$chplOpt" = "-c" ]
    then
        second="$(echo "$rawSearch" | grep -oP "$secondPattern" | tr -d ' ')"
    elif [ "$chplOpt" = "-p" ]
    then
        second="$(echo "$rawSearch" | grep -oP "$secondPattern" | rev | cut -d'"' -f2 | rev)"
    fi

    echo "$names" | sed 's/$/   -   /g' > "${dir}/names"
    echo "$second" > "${dir}/second"
    names="$(paste --delimiters=' ' "${dir}/names" "${dir}/second")"

    sel="$(echo "$names" | nl -s ' ' | dmenu -i -l 15 -p "Select $object:")"
    [ "$sel" = "" ] && exit
    id="$(echo "$ids" | sed "$(echo "$sel" | awk '{print $1}')q;d")"

    echo "$id"
}

getAllVideos() {
    channelPlId="$1"

    instance="$(getInstance)"

    new="$(curl -s "$instance/api/v1/playlists/$channelPlId?pretty=1&page=1" | jq -r '.videos[] | .videoId + " " + .title')"
    vids="$new"
    
    i=2
    while new="$(curl -s "$instance/api/v1/playlists/$channelPlId?pretty=1&page=$i" | jq -r '.videos[] | .videoId + " " + .title')" && [ "$new" != "" ] && vids="$vids\n$new"
    do
        i=$((i+1))
    done
    
    echo "$vids"
}

getNewVideos() {
    chplOpt="$1"
    id="$2"

    checkChExistsCmd="echo \"SELECT * FROM Channel WHERE channelId='\$chId';\""
    checkPlExistsCmd="echo \"SELECT * FROM Playlist WHERE playlistId='\$plId';\""
    insertChCmd="echo \"PRAGMA FOREIGN_KEYS=ON; INSERT INTO Channel(channelId, channelName) VALUES ('\$chId', '\$chName');\""
    insertPlCmd="echo \"PRAGMA FOREIGN_KEYS=ON; INSERT INTO Playlist(playlistId, playlistChannel, playlistName) VALUES ('\$plId', '\$chId', '\$plName');\""
    insertVideoChCmd="echo \"PRAGMA FOREIGN_KEYS=ON; INSERT INTO Video(videoId, channelId, videoTitle, watched) VALUES ('\$videoId', '\$chId', '\$videoTitle', 'N');\""
    insertVideoPlCmd="echo \"PRAGMA FOREIGN_KEYS=ON; INSERT INTO Video(videoId, channelId, videoTitle, playlistId, watched) VALUES ('\$videoId', '\$chId', '\$videoTitle', '\$plId', 'N');\""

    if [ "$chplOpt" = "-c" ]
    then
        chId="$id"
        url="https://youtube.com/channel/$chId"
        checkExistsCmd="$checkChExistsCmd"
        insertVideoCmd="$insertVideoChCmd"
        channelPlId="$(echo "$chId" | sed 's/^UC/UU/g')"
    elif [ "$chplOpt" = "-p" ]
    then
        plId="$id"
        url="https://youtube.com/playlist?list=$plId"
        checkExistsCmd="$checkPlExistsCmd"
        insertVideoCmd="$insertVideoPlCmd"
        channelPlId="$plId"
    fi

    if [ "$(eval "$checkExistsCmd" | sqlite3 "$database")" = "" ]
    then
        #incrementalGet=false
        if [ "$chplOpt" = "-c" ]
        then
            chName="$(yt-dlp --max-downloads 1 --get-filename "$url" -o "%(channel)s")"
            eval "$insertChCmd" | sqlite3 "$database"
        elif [ "$chplOpt" = "-p" ]
        then
            plInfo="$(yt-dlp --max-downloads 1 --get-filename "$url" -o "%(playlist_uploader_id)s|%(uploader)s|%(playlist_title)s")"
            chId="$(echo "$plInfo" | cut -d'|' -f1)"
            chName="$(echo "$plInfo" | cut -d'|' -f2)"
            plName="$(echo "$plInfo" | cut -d'|' -f3)"

            if [ "$(eval "$checkChExistsCmd" | sqlite3 "$database")" = "" ]
            then
                eval "$insertChCmd" | sqlite3 "$database"
            fi

            eval "$insertPlCmd" | sqlite3 "$database"
        fi
    else
        #incrementalGet=true
        asdf="asdf"
    fi
    
    if [ "$chplOpt" = "-c" ]
    then
        videos="$(getAllVideos "$channelPlId" | tac)"
    elif [ "$chplOpt" = "-p" ]
    then
        videos="$(getAllVideos "$channelPlId")"
    fi

    #if [ $incrementalGet = true ]
    #then
    #    while [ "$(echo "SELECT * FROM Video WHERE videoId='$(echo "$videos" | tail -n1 | cut -d' ' -f1)';" | sqlite3 "$database")" = "" ] && [ "$n" -eq "$(echo "$videos" | wc -l | awk '{print $1}')" ]
    #    do
    #        n=$((2*n))
    #        videos="$(yt-dlp --get-filename --max-downloads "$n" "$url" -o "$ytdlFormat")"
    #    done
    #fi

    echo "$videos" | while read -r video
    do
        videoId="$(echo "$video" | cut -d' ' -f1)"
        videoTitle="$(echo "$video" | cut -d' ' -f2- | sed "s/'/''/g")"

        if [ "$(echo "SELECT * FROM Video WHERE videoId='$videoId';" | sqlite3 "$database")" = "" ]
        then
            eval "$insertVideoCmd" | sqlite3 "$database"
        fi
    done

    notify-send "YT: Finished getting videos"
}

getIdByName() {
    chplOpt="$1"
    name="$2"

    if [ "$chplOpt" = "-c" ]
    then
        object="Channel"
        query="SELECT channelId FROM Channel WHERE channelName='$name';"
    elif [ "$chplOpt" = "-p" ]
    then
        object="Playlist"
        query="SELECT playlistId FROM Playlist WHERE playlistName='$name';"
    fi

    if [ "$name" = "NEW" ]
    then
        id="$(searchForNew "$chplOpt")"
    else
        id="$(echo "$query" | sqlite3 "$database" | head -n1)"
    fi
    
    [ "$id" = "" ] && exit

    echo "$id"
}

getSaved() {
    chplOpt="$1"

    if [ "$chplOpt" = "-c" ]
    then
        query="SELECT channelName FROM Channel;"
    elif [ "$chplOpt" = "-p" ]
    then
        query="SELECT playlistName FROM Playlist;"
    fi

    echo "$query" | sqlite3 "$database"
}

play() {
    videoId="$1"

    if command umpv.py >/dev/null 2>&1
    then
        setsid -f umpv.py "https://youtube.com/watch?v=$videoId" >/dev/null 2>&1
    else
        setsid -f mpv --no-resume-playback --ytdl-format="[height<=720]" "https://youtube.com/watch?v=$videoId" >/dev/null 2>&1
    fi

    echo "UPDATE Video SET watched='W' WHERE videoId='$videoId';" | sqlite3 "$database"
}

searchAndWatchVideo() {
    instance="$(getInstance)"

    query="$(dmenu -i -l 15 -p "Search for a Video:" < /dev/null | sed 's/ /+/g')"
    [ "$query" = "" ] && exit

    rawVideos="$(curl -s "$instance/api/v1/search?q=$query&type=video&pretty=1" | jq -r '.[] | .videoId +" " + .title + "  -  " + .author')"

    sel="$(echo "$rawVideos" | cut -d' ' -f2- | dmenu -i -l 15 -p "Select video:")"
    [ "$sel" = "" ] && exit

    videoId="$(echo "$rawVideos" | grep "$sel" | cut -d' ' -f1)"

    [ "$videoId" = "" ] && exit

    play "$videoId"
}

thirdMenu() {
    wsOpt="$1"
    chplvdOpt="$2"

    getVideoIdChCmd="echo \"SELECT videoId FROM Video WHERE channelId='\$id' AND videoTitle='\$sel';\""
    getVideoIdPlCmd="echo \"SELECT videoId FROM Video WHERE playlistId='\$id' AND videoTitle='\$sel';\""

    if [ "$chplvdOpt" = "-c" ]
    then
        object="Channel"
        getVideoId="$getVideoIdChCmd"
    elif [ "$chplvdOpt" = "-p" ]
    then
        object="Playlist"
        getVideoId="$getVideoIdPlCmd"
    elif [ "$chplvdOpt" = "-v" ] # Can only be with 'watch' option
    then
        object="Video"
        searchAndWatchVideo
        exit
    fi

    menuOptions="$(getSaved "$chplvdOpt")"

    if [ "$wsOpt" = "-w" ]
    then
        action="watch"
        if [ "$menuOptions" = "" ]
        then
            menuOptions="NEW"
        else
            menuOptions="$menuOptions\nNEW"
        fi
    elif [ "$wsOpt" = "-s" ]
    then
        action="sync"

        if [ "$menuOptions" = "" ]
        then
            menuOptions="NEW"
        else
            menuOptions="$menuOptions\nNEW"
        fi
    fi

    sel="$(echo "$menuOptions" | dmenu -i -l 15 -p "Select ${object} to ${action}:")"

    if [ "$sel" = "" ]
    then
        exit
    else
        id="$(getIdByName "$chplvdOpt" "$sel")"
        [ "$id" = "" ] && exit
    fi

    if [ "$wsOpt" = "-w" ]
    then
        if [ "$(getVideosFrom "$chplvdOpt" "$id")" = "" ]
        then
            getNewVideos "$chplvdOpt" "$id"
        fi

        sel="$(getVideosFrom "$chplvdOpt" "$id" | dmenu -i -l 15 -p "Select video:" | cut -d' ' -f2-)"
        [ "$sel" = "" ] && exit

        videoId="$(eval "$getVideoId" | sqlite3 "$database" | head -n1)"

        play "$videoId"
    elif [ "$wsOpt" = "-s" ]
    then
        getNewVideos "$chplvdOpt" "$id"
    fi
}

secondMenu() {
    wsOpt="$1"

    chOpt="Channel"
    plOpt="Playlist"
    vdOpt="Video"

    if [ "$wsOpt" = "-w" ]
    then
        action="watch"
        sel="$(printf "%s\n%s\n%s" "$vdOpt" "$chOpt" "$plOpt" | dmenu -i -l 15 -p "Select ${action}ing option:")"
    elif [ "$wsOpt" = "-s" ]
    then
        action="sync"
        sel="$(printf "%s\n%s" "$chOpt" "$plOpt" | dmenu -i -l 15 -p "Select ${action}ing option:")"
    fi

    [ "$sel" = "" ] && exit

    if [ "$sel" = "$chOpt" ]
    then
        chplvd="-c"
    elif [ "$sel" = "$plOpt" ]
    then
        chplvd="-p"
    elif [ "$sel" = "$vdOpt" ]
    then
        chplvd="-v"
    fi

    thirdMenu "$wsOpt" "$chplvd" 
}

createDatabase() {
echo "DROP TABLE IF EXISTS Channel;
DROP TABLE IF EXISTS Video;
DROP TABLE IF EXISTS Playlist;

CREATE TABLE Channel (
    channelId   TEXT NOT NULL,
    channelName TEXT,
    
    PRIMARY KEY (channelId)
);

CREATE TABLE Playlist (
    playlistId      TEXT NOT NULL,
    playlistName    TEXT,
    playlistChannel TEXT,
    
    PRIMARY KEY (playlistId),
    FOREIGN KEY (playlistChannel) REFERENCES Channel(channelId)
);

CREATE TABLE Video (
    videoId     TEXT NOT NULL,
    playlistId  TEXT,
    channelId   TEXT,
    videoTitle  TEXT,
    watched     TEXT,

    PRIMARY KEY (videoId),
    FOREIGN KEY (channelId) REFERENCES Channel(channelId),
    FOREIGN KEY (playlistId) REFERENCES Playlist(playlistId)
);" | sqlite3 "$database"
}

resetDatabase() {
    if [ "$(dmenu -i -p "Enter 'RESET DATABASE' to reset the database:" < /dev/null)" = "RESET DATABASE" ]
    then
        rm "$database" >/dev/null 2>&1
        createDatabase
        notify-send "YT: Database has been reset"
    fi
}

mainMenu() {
    syncOption="Sync"
    watchOption="Watch"
    resetDBOption="Reset Database"

    [ ! -f "$database" ] && createDatabase && notify-send "YT: Database has been created"

    #[ "$(pgrep -fc "/bin/sh $0")" -ge 2 ] && notify-send "YT: Download already in progress" && sleep 2

    selection="$(printf "%s\n%s\n%s" "$watchOption" "$syncOption" "$resetDBOption" | dmenu -i -l 10 -p "Menu:")"

    if [ "$selection" = "$watchOption" ]
    then
        secondMenu -w
    elif [ "$selection" = "$syncOption" ]
    then
        secondMenu -s
    elif [ "$selection" = "$resetDBOption" ]
    then
        resetDatabase
    fi
}

mainMenu
